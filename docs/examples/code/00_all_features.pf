// COMPREHENSIVE POLYLOFT FEATURE TEST
// This file tests all documented language features

println("========================================")
println(" POLYLOFT COMPREHENSIVE FEATURE TEST")
println("========================================")
println("")

// 1. VARIABLES - let, const, var
println("1. Variables (let, const, var)")
let mutableVar = 42
mutableVar = 50
const CONSTANT = 3.14159
var uninitializedVar: Int
uninitializedVar = 100
println("  let: " + mutableVar.toString())
println("  const: " + CONSTANT.toString())
println("  var: " + uninitializedVar.toString())
println("")

// 2. TYPES - Int, Float, String, Bool
println("2. Basic Types")
let intVal: Int = 42
let floatVal: Float = 3.14
let stringVal: String = "Hello"
let boolVal: Bool = true
println("  Int: " + intVal.toString())
println("  Float: " + floatVal.toString())
println("  String: " + stringVal)
println("  Bool: " + boolVal.toString())
println("")

// 3. CLASSES with correct constructor syntax
println("3. Classes (ClassName constructor syntax)")
class Person:
    name: String
    age: Int
    
    Person(n: String, a: Int):
        this.name = n
        this.age = a
    end
    
    def introduce():
        println("  My name is " + this.name + ", age " + this.age.toString())
    end
end

let alice = Person("Alice", 30)
alice.introduce()
println("")

// 4. ACCESS MODIFIERS - private, public, protected
println("4. Access Modifiers (private, public, protected)")
class Account:
    private let balance: Float
    public let id: String
    
    Account(accountId: String, initialBalance: Float):
        this.id = accountId
        this.balance = initialBalance
    end
    
    public def getBalance() -> Float:
        return this.balance
    end
end

let account = Account("ACC001", 1000.0)
println("  Account ID (public): " + account.id)
println("  Balance (via public method): " + account.getBalance().toString())
println("")

// 5. INHERITANCE
println("5. Inheritance (extends)")
class Animal:
    name: String
    
    Animal(n: String):
        this.name = n
    end
    
    def speak() -> String:
        return "Some sound"
    end
end

class Dog < Animal:
    Dog(n: String):
        super(n)
    end
    
    def speak() -> String:
        return "Woof!"
    end
end

class Cat < Animal:
    Cat(n: String):
        super(n)
    end
    
    def speak() -> String:
        return "Meow!"
    end
end

let dog = Dog("Buddy")
let cat = Cat("Whiskers")
println("  Dog: " + dog.name + " says " + dog.speak())
println("  Cat: " + cat.name + " says " + cat.speak())
println("")

// 6. GENERICS
println("6. Generics (Box<T>)")
class Box<T>:
    value: T
    
    Box(v: T):
        this.value = v
    end
    
    def get() -> T:
        return this.value
    end
    
    def set(newVal: T):
        this.value = newVal
    end
end

let intBox = Box<Int>(42)
let strBox = Box<String>("test")
println("  Int box: " + intBox.get().toString())
println("  String box: " + strBox.get())
intBox.set(100)
println("  After set: " + intBox.get().toString())
println("")

// 7. FUNCTIONS
println("7. Functions (def, lambdas)")
def add(a: Int, b: Int) -> Int:
    return a + b
end

def greet(name: String):
    println("  Hello, " + name + "!")
end

let multiply = (x: Int, y: Int) -> Int => x * y
let square = (n: Int) -> Int => n * n

greet("World")
println("  add(5, 3) = " + add(5, 3).toString())
println("  multiply(4, 5) = " + multiply(4, 5).toString())
println("  square(7) = " + square(7).toString())
println("")

// 8. CLOSURES
println("8. Closures")
def makeCounter():
    let count = 0
    return () => {
        count = count + 1
        return count
    }
end

let counter = makeCounter()
println("  Counter: " + counter().toString())
println("  Counter: " + counter().toString())
println("  Counter: " + counter().toString())
println("")

// 9. MATH MODULE
println("9. Math Module (builtin)")
println("  Math.PI: " + Math.PI.toString())
println("  Math.E: " + Math.E.toString())
println("  Math.sqrt(16): " + Math.sqrt(16).toString())
println("  Math.pow(2, 8): " + Math.pow(2, 8).toString())
println("  Math.abs(-42): " + Math.abs(-42).toString())
println("  Math.floor(3.7): " + Math.floor(3.7).toString())
println("  Math.ceil(3.2): " + Math.ceil(3.2).toString())
println("  Math.round(3.5): " + Math.round(3.5).toString())
println("  Math.min(5, 3): " + Math.min(5, 3).toString())
println("  Math.max(5, 3): " + Math.max(5, 3).toString())
println("  Math.sin(0): " + Math.sin(0).toString())
println("  Math.cos(0): " + Math.cos(0).toString())
println("  Math.random(): " + Math.random().toString())
println("")

// 10. SYS MODULE  
println("10. Sys Module (builtin)")
let startTime = Sys.time()
println("  Sys.time(): " + startTime)
Sys.sleep(50)
let endTime = Sys.time()
println("  After 50ms sleep: " + endTime)
println("  Sys.random(): " + Sys.random().toString())
Sys.seed(12345)
println("  Sys.random() with seed: " + Sys.random().toString())
println("")

// 11. ARRAYS
println("11. Arrays")
let numbers = [1, 2, 3, 4, 5]
println("  Array: " + numbers.toString())
println("  Length: " + numbers.length().toString())
println("  First element: " + numbers[0].toString())
println("  Last element: " + numbers[4].toString())
println("")

// 12. COLLECTION METHODS (map, filter, reduce)
println("12. Collection Methods (map, filter, reduce)")
let doubled = numbers.map((x: Int) -> Int => x * 2)
let evens = numbers.filter((x: Int) -> Boolean => x % 2 == 0)
let sum = numbers.reduce(0, (acc: Int, x: Int) -> Int => acc + x)
println("  Doubled: " + doubled.toString())
println("  Evens: " + evens.toString())
println("  Sum: " + sum.toString())
println("")

// 13. STRING OPERATIONS
println("13. String Operations")
let text = "hello"
println("  Original: " + text)
println("  Length: " + text.length().toString())
println("  Uppercase: " + text.toUpper())
println("  Concat: " + (text + " world"))
let words = ["one", "two", "three"]
println("  Join: " + words.join(", "))
println("")

// 14. CONTROL FLOW - if/elif/else
println("14. Control Flow (if/elif/else)")
let testAge = 18
if testAge >= 18:
    println("  Adult")
elif testAge >= 13:
    println("  Teenager")  
else:
    println("  Child")
end
println("")

// 15. FOR LOOPS
println("15. For Loops (range, for-in)")
print("  range(5): ")
for i in range(5):
    print(i.toString() + " ")
end
println("")

print("  for-in array: ")
let fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit + " ")
end
println("")
println("")

// 16. BREAK AND CONTINUE
println("16. Break and Continue")
print("  break at 3: ")
for i in range(10):
    if i == 3:
        break
    end
    print(i.toString() + " ")
end
println("")

print("  continue on 2: ")
for i in range(5):
    if i == 2:
        continue
    end
    print(i.toString() + " ")
end
println("")
println("")

// 17. THREADS
println("17. Threads (thread spawn, thread join)")
let thread1 = thread spawn do
    println("  Thread executing")
    return 42
end

let threadResult = thread join thread1
println("  Thread result: " + threadResult.toString())
println("")

// 18. DEFER
println("18. Defer Statement")
def deferTest():
    defer println("  Deferred 2")
    defer println("  Deferred 1")
    println("  Function body")
end
deferTest()
println("")

// 19. GENERIC LIST
println("19. Generic List<T>")
let intList = List<Int>(10, 20, 30)
println("  List size: " + intList.size().toString())
println("  First: " + intList.get(0).toString())
intList.add(40)
println("  After add: " + intList.size().toString())
let listDoubled = intList.map((x: Int) -> Int => x * 2)
println("  Mapped: " + listDoubled.toString())
println("")

// 20. STRING INTERPOLATION (limited)
println("20. String Interpolation")
let userName = "Alice"
let userAge = 25
println("  Name: " + userName + ", Age: " + userAge.toString())
println("")

// 21. SWITCH STATEMENT
println("21. Switch Statement")

// Value matching
let dayNum = 3
switch dayNum:
    case 1:
        println("  Monday")
    case 2:
        println("  Tuesday")
    case 3:
        println("  Wednesday (matched)")
    case 4, 5:
        println("  Thursday or Friday")
    default:
        println("  Weekend or invalid")
end

// Type matching
let mixedValue = "Hello"
switch mixedValue:
    case (n: Int):
        println("  Integer: " + n.toString())
    case (s: String):
        println("  String: " + s + " (matched)")
    case (f: Float):
        println("  Float: " + f.toString())
    default:
        println("  Other type")
end

println("")

println("========================================")
println(" ALL FEATURES TESTED SUCCESSFULLY!")
println("========================================")
