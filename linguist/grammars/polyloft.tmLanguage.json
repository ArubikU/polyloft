{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Polyloft",
  "scopeName": "source.polyloft",
  "fileTypes": [
    "pf"
  ],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#classes"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#builtin-functions"
    },
    {
      "include": "#storage"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.polyloft",
          "match": "//.*$"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.polyloft",
          "match": "\\b(if|else|elif|for|while|break|continue|return|in|end)\\b"
        },
        {
          "name": "keyword.other.polyloft",
          "match": "\\b(import|from|as|export)\\b"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.type.polyloft",
          "match": "\\b(let|def|class)\\b"
        },
        {
          "name": "variable.language.polyloft",
          "match": "\\b(this|self)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.polyloft",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.polyloft",
              "match": "\\\\."
            },
            {
              "name": "meta.embedded.line.polyloft",
              "begin": "#\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.single.polyloft",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.polyloft",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.polyloft",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.polyloft",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.polyloft",
          "match": "\\b(def)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "storage.type.function.polyloft"
            },
            "2": {
              "name": "entity.name.function.polyloft"
            }
          }
        },
        {
          "name": "entity.name.function.polyloft",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "meta.class.polyloft",
          "match": "\\b(class)\\s+([A-Z][a-zA-Z0-9_]*)\\s*:",
          "captures": {
            "1": {
              "name": "storage.type.class.polyloft"
            },
            "2": {
              "name": "entity.name.class.polyloft"
            }
          }
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.polyloft",
          "match": "\\b(true|false|nil|null)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.polyloft",
          "match": "\\+|\\-|\\*|\\/|%"
        },
        {
          "name": "keyword.operator.comparison.polyloft",
          "match": "==|!=|<|>|<=|>="
        },
        {
          "name": "keyword.operator.logical.polyloft",
          "match": "\\b(and|or|not)\\b|&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.assignment.polyloft",
          "match": "="
        },
        {
          "name": "keyword.operator.range.polyloft",
          "match": "\\.\\.\\.|\\.\\."
        }
      ]
    },
    "builtin-functions": {
      "patterns": [
        {
          "name": "support.function.builtin.polyloft",
          "match": "\\b(println|print|len|range|type|str|int|float|bool|list|dict|map|filter|reduce|concat|split|join|push|pop|shift|unshift|slice|indexOf|lastIndexOf|contains|startsWith|endsWith|replace|toLowerCase|toUpperCase|trim|charAt|charCodeAt|fromCharCode|abs|ceil|floor|round|sqrt|pow|exp|log|min|max|random|sin|cos|tan|asin|acos|atan|atan2)\\b"
        },
        {
          "name": "support.class.builtin.polyloft",
          "match": "\\b(Sys|Array|String|Math|Object|JSON|File|Http|Time|Regex)\\b"
        }
      ]
    }
  }
}
